---
layout: default
title: "Stored Procedure 與 OOP 的取捨"
permalink: /StoredProcedure與OOP的取捨/
---

# Stored Procedure 與 OOP 的取捨

在討論資料庫操作時，許多人會在使用 Stored Procedure（SP）或是將邏輯放在應用程式層之間掙扎。以下整理了與同事討論後的幾個重點，希望能在五分鐘內讓你掌握雙方的優缺點。

## 物件導向開發的流程
1. 先從需求分析出發，釐清 **誰** 要在 **什麼情境** 下做 **什麼事**。
2. 依照用例建立 Domain Model，設計物件與服務的責任。
3. 在此基礎上撰寫程式，最後才決定資料庫結構與儲存方式。

若一開始就把主要邏輯寫在 SP 中，往往會讓開發者忽略需求分析與物件建模，只剩下「完成功能」的思維，難以維持模組邊界與封裝性。

## 反對大量使用 SP 的理由
- **模組化被破壞**：邏輯分散在 DB 與程式碼之間，難以測試與維護。
- **版本控管麻煩**：若 SP 沒有和程式碼一起管理，容易造成環境不一致。
- **人力技能落差**：熟悉資料庫的人不一定懂應用程式架構，雙方協作成本高。

## SP 的優勢
- **效能佳**：複雜查詢或大量資料處理時，SP 可以減少資料傳輸並提前編譯。
- **安全性**：可透過權限控制，讓使用者僅能呼叫特定 SP。
- **集中資料計算**：在金融或統計情境，SP 處理龐大資料往往更有效率。

## 折衷的做法
1. **業務邏輯留在應用層**：Use Case 與 Domain Service 以 OOP 設計，方便測試與重用。
2. **SP 專注資料存取**：只在需要效能或複雜查詢時使用 SP，並將其納入版本控管與 CI/CD。
3. **清楚溝通原則**：在團隊內確立何時用 SP、何時用程式碼實作，避免為了方便而犧牲架構一致性。

總結來說，Stored Procedure 並非萬惡，但若過度依賴，確實容易脫離需求與設計初衷。善用其效能與安全優勢，同時保持物件導向的設計流程，才能兼顧維護性與系統品質。
