---
layout: default
title: "以 Domain 劃分專案架構的重要性"
permalink: /以Domain劃分專案架構的重要性/
---

## 前言
在許多開發專案中，程式碼往往依照 Service、ViewModel、DAO 等技術面向去劃分。雖然此方式在早期十分流行，但若過度依賴這種劃分，就會忽略業務的核心概念，讓專案難以反映真實需求。本文將說明以 Domain 為中心劃分架構的重要性。

## 問題點
以技術層分區看似整齊，實際上卻打散了同一概念下的邏輯。當你需要了解「訂單」這個主題時，實作會被分散在多個資料夾中：訂單的 Service 在一處，訂單的 ViewModel 在另一處，資料庫存取又在 DAO 區域。久而久之，開發者無法直接看出訂單的完整行為，只能從零散的技術切面拼湊。

## Domain 的力量
若將專案的分區改以 Domain 為主，就能把一個主題相關的所有程式集中在一起。以實體超市為例：生鮮區、乾貨區、清潔用品區各自獨立擺放，原因在於每個區域都代表不同的商品性質與客群。若把食鹽誤放到清潔區或冷凍庫，非但不便於管理，也容易造成混亂。相同的概念放到軟體專案中，就是把訂單相關的邏輯和資料都放在同一個領域資料夾內，開發者只要走進這個區域，就能理解整個訂單流程。

## 以需求驅動的架構
以 Domain 劃分並不表示完全捨棄 Service 或 DAO，而是先根據業務功能界定範圍，再在區域內劃分層次。例如 `Order` 這個資料夾下可以包含 `Application`、`Infrastructure` 或 `Presentation` 子資料夾，但頂層仍以業務模型為單位。如此一來，閱讀程式碼就像在特定區域購物：你知道所有「訂單」相關的邏輯都集中在一起。

## 與傳統分層的差異
如果單純依照 ViewModel 或 DAO 來分，當需求擴充時，很容易讓專案結構變得雜亂。任何新增的業務功能都得在多個地方各增一個檔案，既不方便尋找也不利於理解。以 Domain 為中心則可以自然地隨著業務擴展：新的流程或資料都放在原本的業務資料夾中，其他領域互不干擾，清晰地反映出組織內部的分工模式。

## 總結
服務、DAO 等分層設計對某些專案仍有價值，但當專案越來越大，唯有以 Domain 為單位來劃分，才能真正體現業務概念並提升可維護性。就像超市不會把不同性質的商品混在同一個角落，化學工廠更不會和生鮮賣場共用存放區域。唯有按照領域劃分，程式碼才能讓人一目了然，也使整個團隊在溝通上更加精確。
